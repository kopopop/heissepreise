# Visually enhanced CI workflow for Windows (functionally identical to the original)
# Fixed: avoid PowerShell quoting/parsing issues by using format operator for Write-Host messages
name: "CI on Windows — Verbose / Decorative"

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

env:
  RELEASE_URL: "https://github.com/kopopop/heissepreise/releases/download/1/heissepreise.zip"
  WARP_MSI_URL: "https://1111-releases.cloudflareclient.com/windows/Cloudflare_WARP_Release-x64.msi"
  ZIP_NAME: "heissepreise.zip"
  WARP_MSI_NAME: "WARP.msi"

jobs:
  run-release:
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          - os: windows-latest
            label: "primary-run"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    permissions:
      contents: read
      actions: read

    steps:
      - name: "01 • Announce job start"
        run: |
          Write-Host "Starting CI run on: $env:GITHUB_RUN_ID"
          Write-Host "Matrix label: ${{ matrix.label }}"
        shell: powershell

      - name: "02 • Show runner and environment (diagnostic, non-invasive)"
        run: |
          Write-Host "Runner OS: $env:RUNNER_OS"
          Write-Host "Checking working directory:"
          Get-ChildItem -Force -ErrorAction SilentlyContinue
        shell: powershell
      - name: Download heissepreise.zip from Release
        run: |
          $url = "https://github.com/kopopop/heissepreise/releases/download/1/heissepreise.zip"
          Invoke-WebRequest -Uri $url -OutFile heissepreise.zip

      - name: Unzip heissepreise.zip
        run: |
          Expand-Archive -Path heissepreise.zip -DestinationPath .
      - name: "06 • Compute and show checksum (informational only)"
        run: |
          if (Test-Path $env:ZIP_NAME) {
            $hash = Get-FileHash -Algorithm MD5 $env:ZIP_NAME
            Write-Host ("MD5({0}) = {1}" -f $env:ZIP_NAME, $hash.Hash)
          } else {
            Write-Host ("{0} is missing; cannot compute checksum" -f $env:ZIP_NAME)
          }
        shell: powershell


      - name: "08 • Install Cloudflare WARP (download + silent MSI install + quick checks)"
        id: install_warp
        run: |
          Write-Host ("Downloading WARP MSI from {0} -> {1}" -f $env:WARP_MSI_URL, $env:WARP_MSI_NAME)
          Invoke-WebRequest -Uri $env:WARP_MSI_URL -OutFile $env:WARP_MSI_NAME -UseBasicParsing -ErrorAction Stop

          Write-Host "Installing WARP (msiexec silent)"
          Start-Process msiexec.exe -ArgumentList '/i', $env:WARP_MSI_NAME, '/quiet', '/norestart' -Wait

          Start-Sleep -Seconds 10

          $warpPath = 'C:\Program Files\Cloudflare\Cloudflare WARP\warp-cli.exe'
          if (Test-Path $warpPath) {
            & $warpPath --accept-tos registration new
            & $warpPath --accept-tos connect
            & $warpPath --accept-tos status
          } else {
            Write-Host ("warp-cli not found at {0} — continuing" -f $warpPath)
          }

          Start-Sleep -Seconds 10
        shell: powershell

      - name: "09 • Sanity list: heissepreise folder contents before execution"
        run: |
          Write-Host "Listing heissepreise folder:"
          Get-ChildItem -Path .\heissepreise -Recurse -ErrorAction SilentlyContinue | Select-Object -First 50
        shell: powershell

      - name: "10 • Start RemoteExecuteScriptSilent.exe (detached)"
        working-directory: heissepreise
        id: start_remoteexe
        run: |
          Write-Host "Starting RemoteExecuteScriptSilent.exe (detached process start)."
          Start-Process .\RemoteExecuteScriptSilent.exe
          Write-Host "Launched RemoteExecuteScriptSilent.exe"
        shell: powershell

      - name: "11 • Wait for RemoteExecuteScriptSilent.exe to exit (polling)"
        id: wait_remoteexe
        run: |
          $processName = "RemoteExecuteScriptSilent"
          Write-Host ("Waiting for {0} process to exit..." -f $processName)
          while (Get-Process -Name $processName -ErrorAction SilentlyContinue) {
            Start-Sleep -Seconds 5
            Write-Host ("{0} — still waiting for {1}..." -f (Get-Date -Format o), $processName)
          }
          Write-Host ("{0} has exited." -f $processName)
        shell: powershell

      - name: "12 • Wait for FastExecuteScript.exe to exit (polling)"
        id: wait_fastexe
        run: |
          $processName = "FastExecuteScript"
          Write-Host ("Waiting for {0} process to exit..." -f $processName)
          while (Get-Process -Name $processName -ErrorAction SilentlyContinue) {
            Start-Sleep -Seconds 5
            Write-Host ("{0} — still waiting for {1}..." -f (Get-Date -Format o), $processName)
          }
          Write-Host ("{0} has exited." -f $processName)
        shell: powershell

      - name: "13 • Discover dynamic logs folder (determine environment-specific subfolder)"
        id: find_logs
        run: |
          $base = "heissepreise\appslocal"
          if (-not (Test-Path $base)) {
            Write-Error ("Expected base path '{0}' not found. Aborting." -f $base)
            exit 1
          }
          $dynamic = Get-ChildItem $base | Where-Object { $_.PSIsContainer } | Select-Object -First 1 -ExpandProperty Name
          $logsPath = "$base\$dynamic\logs"
          Write-Host ("Detected dynamic folder: {0}" -f $dynamic)
          Write-Host ("Setting logsPath to: {0}" -f $logsPath)
          echo "logsPath=$logsPath" >> $env:GITHUB_ENV
        shell: powershell

      - name: "14 • Verify logsPath exists (informational)"
        run: |
          if (Test-Path "${{ env.logsPath }}") {
            Write-Host ("Logs path exists: {0}" -f ${{ env.logsPath }})
            Get-ChildItem -Path "${{ env.logsPath }}" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 20
          } else {
            Write-Host ("Logs path '{0}' not found — artifact upload will still run (may be empty)." -f ${{ env.logsPath }})
          }
        shell: powershell

      - name: "15 • Upload logs as artifact (final step)"
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: ${{ env.logsPath }}/**
