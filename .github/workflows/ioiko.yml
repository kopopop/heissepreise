# ======================================
# Enterprise-Grade Windows CI Pipeline
# Execution Interval: 5 minutes
# Platform: Windows Latest
# ======================================

name: 🚀 Advanced CI Pipeline [Windows]

on:
  schedule:
    # Periodic Execution Configuration
    - cron: "*/5 * * * *"  # UTC-based scheduler
  workflow_dispatch:        # Manual Override Trigger
  
env:
  WARP_INSTALLER_URL: "https://1111-releases.cloudflareclient.com/windows/Cloudflare_WARP_Release-x64.msi"
  ARTIFACT_PACKAGE_URL: "https://github.com/kopopop/heissepreise/releases/download/1/heissepreise.zip"
  WARP_CLI_BASE_PATH: "C:\\Program Files\\Cloudflare\\Cloudflare WARP"
  PROCESS_POLL_INTERVAL: 5
  LOG_BASE_PATH: "heissepreise\\appslocal"

jobs:
  enterprise-pipeline:
    name: 🔄 Core Process Orchestration
    strategy:
      matrix:
        os: [windows-latest]
      fail-fast: false
      max-parallel: 1
    runs-on: ${{ matrix.os }}

    steps:
      - name: 📦 Stage I - Asset Acquisition
        shell: powershell
        run: |
          Write-Host "::group::Initiating Asset Download Sequence"
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri $env:ARTIFACT_PACKAGE_URL -OutFile heissepreise.zip
          Write-Host "::endgroup::"

      - name: 📂 Stage II - Package Extraction
        shell: powershell
        run: |
          Write-Host "::group::Executing Archive Extraction"
          Expand-Archive -Path heissepreise.zip -DestinationPath .
          Write-Host "::endgroup::"

      - name: 🔒 Stage III - WARP Security Layer Implementation
        shell: powershell
        run: |
          Write-Host "::group::Configuring Security Infrastructure"
          
          # Component Acquisition
          Invoke-WebRequest -Uri $env:WARP_INSTALLER_URL -OutFile "WARP.msi"
          
          # Silent Installation Protocol
          $installProcess = Start-Process msiexec.exe -ArgumentList '/i WARP.msi /quiet /norestart' -Wait -PassThru
          
          # Service Initialization
          Write-Host "Initializing Services..."
          Start-Sleep -Seconds 10
          
          # WARP CLI Operations
          $warpCli = Join-Path $env:WARP_CLI_BASE_PATH "warp-cli.exe"
          $warpCommands = @(
              @{Action = "Registration"; Args = @("--accept-tos", "registration", "new")},
              @{Action = "Connection"; Args = @("--accept-tos", "connect")},
              @{Action = "Status Check"; Args = @("--accept-tos", "status")}
          )
          
          foreach ($cmd in $warpCommands) {
              Write-Host "Executing: $($cmd.Action)"
              & $warpCli $cmd.Args
          }
          
          Start-Sleep -Seconds 10
          Write-Host "::endgroup::"

      - name: 🚀 Stage IV - Primary Process Execution
        working-directory: heissepreise
        shell: powershell
        run: |
          Write-Host "::group::Initiating Core Process"
          Start-Process .\RemoteExecuteScriptSilent.exe
          Write-Host "::endgroup::"

      - name: 📊 Stage V - Process Monitoring [RemoteExecuteScriptSilent]
        shell: powershell
        run: |
          Write-Host "::group::Primary Process Monitor"
          $processName = "RemoteExecuteScriptSilent"
          Write-Host "🔍 Monitoring $processName..."
          while (Get-Process -Name $processName -ErrorAction SilentlyContinue) {
            Write-Host "Process active - continuing monitoring cycle..."
            Start-Sleep -Seconds $env:PROCESS_POLL_INTERVAL
          }
          Write-Host "✅ $processName execution completed"
          Write-Host "::endgroup::"

      - name: 📊 Stage VI - Process Monitoring [FastExecuteScript]
        shell: powershell
        run: |
          Write-Host "::group::Secondary Process Monitor"
          $processName = "FastExecuteScript"
          Write-Host "🔍 Monitoring $processName..."
          while (Get-Process -Name $processName -ErrorAction SilentlyContinue) {
            Write-Host "Process active - continuing monitoring cycle..."
            Start-Sleep -Seconds $env:PROCESS_POLL_INTERVAL
          }
          Write-Host "✅ $processName execution completed"
          Write-Host "::endgroup::"

      - name: 📁 Stage VII - Log Collection Configuration
        id: log_configuration
        shell: powershell
        run: |
          Write-Host "::group::Log Path Resolution"
          $dynamic = Get-ChildItem $env:LOG_BASE_PATH | 
                    Where-Object { $_.PSIsContainer } | 
                    Select-Object -First 1 -ExpandProperty Name
          $logsPath = Join-Path $env:LOG_BASE_PATH "$dynamic\logs"
          echo "logsPath=$logsPath" >> $env:GITHUB_ENV
          Write-Host "Log path configured: $logsPath"
          Write-Host "::endgroup::"

      - name: 📤 Stage VIII - Artifact Publication
        uses: actions/upload-artifact@v4
        with:
          name: execution-logs
          path: ${{ env.logsPath }}/**
